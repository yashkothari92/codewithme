// Leetcode #53. Maximum Subarray

class MaxSumSubArray {
  // Brute-force solution
  public int maxSubArray(int[] nums) {
        int maxSum = Integer.MIN_VALUE;
        for(int i=0; i<nums.length; i++){
            int sum = 0;
            for(int j=i; j<nums.length; j++) {
                sum+=nums[j];
                if(sum > maxSum) {
                    maxSum = sum;
                }   
            }
        }
        return maxSum;
    }
    
    // Optimal - Kadane Algo (O(n))
    public int maxSubArray(int[] nums) {
        int maxSum = nums[0];
        int maxSoFar = nums[0];
        
        for(int i=1; i<nums.length; i++){
            maxSoFar = Math.max(maxSoFar+nums[i], nums[i]);
            maxSum = Math.max(maxSoFar, maxSum);
        }
        return maxSum;
    }
}
