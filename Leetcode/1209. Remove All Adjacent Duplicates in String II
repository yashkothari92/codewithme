LC#1209. Remove All Adjacent Duplicates in String II

You are given a string s and an integer k, a k duplicate removal consists of choosing k adjacent and equal letters from s and removing them, 
causing the left and the right side of the deleted substring to concatenate together.
We repeatedly make k duplicate removals on s until we no longer can.
Return the final string after all such duplicate removals have been made. It is guaranteed that the answer is unique.

Example 1:
  Input: s = "abcd", k = 2
  Output: "abcd"
  Explanation: There's nothing to delete.

Example 2:
  Input: s = "deeedbbcccbdaa", k = 3
  Output: "aa"
  Explanation: 
  First delete "eee" and "ccc", get "ddbbbdaa"
  Then delete "bbb", get "dddaa"
  Finally delete "ddd", get "aa"

Example 3:
  Input: s = "pbbcggttciiippooaais", k = 2
  Output: "ps"
--------------------------------- --------------------------------- ---------------------------------
 public String removeDuplicates(String s, int k) {
        StringBuilder str = new StringBuilder();
        Stack<int[]> stack = new Stack<>();
        
        for(int i=0; i<s.length(); i++) {
            Character ch = s.charAt(i);
            if(stack.isEmpty() || stack.peek()[0] != ch) {
                stack.push(new int[]{ch, 1});
            } else {
                // if top of the stack is same as current element
                stack.peek()[1]++;
                
                if(stack.peek()[1] == k) {
                    stack.pop();
                }
            }
        }
        
        while(!stack.isEmpty()){
            str.append((char)stack.peek()[0]);
            stack.peek()[1]--;
            
            if(stack.peek()[1]==0)
                stack.pop();
        }
        
        return str.reverse().toString();
    }
