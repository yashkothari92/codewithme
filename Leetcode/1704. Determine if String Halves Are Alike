LC#1704. Determine if String Halves Are Alike   (Easy)

You are given a string s of even length. Split this string into two halves of equal lengths, and let a be the first half and b be the second half.
Two strings are alike if they have the same number of vowels ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'). Notice that s contains uppercase and lowercase letters.
Return true if a and b are alike. Otherwise, return false

Example 1:
Input: s = "book"
Output: true
Explanation: a = "bo" and b = "ok". a has 1 vowel and b has 1 vowel. Therefore, they are alike.

Example 2:
Input: s = "textbook"
Output: false
Explanation: a = "text" and b = "book". a has 1 vowel whereas b has 2. Therefore, they are not alike.
Notice that the vowel o is counted twice.


class Solution {
    public boolean halvesAreAlike(String s) {
        int slow = 0;
        int fast = 0;
        int vowelCntS1 = 0;
        int vowelCnt2 = 0;
        // initialize List with Vowels
        List<Character> list = Arrays.asList('a','e','i','o','u');
        
        s = s.toLowerCase();
        // identify the size to split into two halves (or use 2 ptr technique)
        // iterate through first half (also maintains vowelCntS1)
        while(fast < s.length()-1) {
            char ch = s.charAt(slow);
            if(list.contains(ch)) 
                vowelCntS1++;
            
            slow += 1;
            fast += 2;
        }
        
        // iterate through second half
        fast = slow++;
        while (fast <= s.length()-1) {
            char ch = s.charAt(fast);
            if(list.contains(ch)) 
                vowelCnt2++;
            
            fast++;
        }
        
        return (vowelCntS1 == vowelCnt2);
    }
}
