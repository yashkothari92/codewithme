LC#943. Find the Shortest Superstring (Hard)

Given an array of strings words, return the smallest string that contains each string in words as a substring. 
If there are multiple valid strings of the smallest length, return any of them.

You may assume that no string in words is a substring of another string in words.

Example 1:
  Input: words = ["alex","loves","leetcode"]
  Output: "alexlovesleetcode"
  Explanation: All permutations of "alex","loves","leetcode" would also be accepted.

Example 2:
  Input: words = ["catg","ctaagt","gcta","ttca","atgcatc"]
  Output: "gctaagttcatgcatc"
----------------------------

class Solution {
    public String shortestSuperstring(String[] words) {
        Map<String, String> map = new HashMap<>();
        
        int unused = 0;
        // [TBC]
        for(int i=0; i<words.length; i++) {
            unused |= 1 << i;
        }
        
        return shortestSuperstring(words, "", unused, map);
    }
    
    private String shortestSuperstring(String[] words, String sWord, int unused, Map<String, String> map) {
        if(unused == 0)
            return sWord;
        
        String key = sWord + "|"+ unused;
        if(map.containsKey(key)) {
            return map.get(key);
        }
        
        String shortest = null;
        for(int i=0; i<words.length; i++) {
            if(!isConsumed(unused, i)) {
                // get the shortest super string starting from an unused word
                String superstring = shortestSuperstring(words, words[i], consume(unused, i), map);

				// "append" the shortest super string to the start word
                String appended = overlapAppend(sWord, superstring);

				// keep the shortest
                if (shortest == null || appended.length() < shortest.length()) {
                    shortest = appended;
				}
            }
        }
        map.put(key, shortest);
        return shortest;
    }
    
    private String overlapAppend(String a, String b) {
		for (int i = Math.max(1, a.length() - b.length()); i < a.length(); i++) {
			  boolean match = true;
        for (int j = i; j < a.length(); j++) {
          if (a.charAt(j) != b.charAt(j - i)) {
            match = false;
            break;
          }
        }

        // "ba"+"kelt" => "bakelt"
        if (match) {
          return a.substring(0, i) + b;
        }
      }
		  return a + b;
	  }
    
    // [TBC]
    private boolean isConsumed(int unused, int i) {
        return ((unused >> i) & 1) == 0;
    }
    
    // [TBC]
    private int consume(int unused, int i) {
        return unused & ~ (1 << i);
    }
}
