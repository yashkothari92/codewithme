LC#216. Combination Sum III (Medium)

Find all valid combinations of k numbers that sum up to n such that the following conditions are true:

    Only numbers 1 through 9 are used.
    Each number is used at most once.

Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.

Example 1:
  Input: k = 3, n = 7
  Output: [[1,2,4]]
  Explanation:
  1 + 2 + 4 = 7
  There are no other valid combinations.

Example 2:
  Input: k = 3, n = 9
  Output: [[1,2,6],[1,3,5],[2,3,4]]
  Explanation:
  1 + 2 + 6 = 9
  1 + 3 + 5 = 9
  2 + 3 + 4 = 9
  There are no other valid combinations.

Example 3:
  Input: k = 4, n = 1
  Output: []
  Explanation: There are no valid combinations. [1,2,1] is not valid because 1 is used twice.

Example 4:
  Input: k = 3, n = 2
  Output: []
  Explanation: There are no valid combinations.

Example 5:
  Input: k = 9, n = 45
  Output: [[1,2,3,4,5,6,7,8,9]]
  Explanation:
  1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45
  There are no other valid combinations.
---------------------------
Backtracking
---------------------------

class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        Set<List<Integer>> ans = new HashSet<>();
        
        // to avoild duplicate & avoid permutation
        combinationSumHelper(ans, k, n, new HashSet<Integer>());
        return new ArrayList<>(ans);
    }
    
    private void combinationSumHelper(Set<List<Integer>> ans, int numOfElems, int sum, Set<Integer> currSet) {
        
        // base case: add the answer when numOfElems == k & meets sum, add it to the set
        if(numOfElems == 0) {
            if (sum == 0) {
                ans.add(new ArrayList(currSet));
                return;
            } else { 
                return;
            }
        }
        
        // if sum goes below zero, abort it
        if(sum < 0) {
            return;
        }
        
        // iterate over [1, ...9] and perform backtracking
        for(int i=1; i<=9; i++) {
        
          // to avoid duplicate elemets in currentSet
            if(!currSet.contains(i)) {
                currSet.add(i);
                combinationSumHelper(ans, numOfElems-1, sum-i, currSet);
                currSet.remove(i);
            }
        }
    }
}
