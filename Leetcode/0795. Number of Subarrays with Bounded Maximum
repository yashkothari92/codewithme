LC#795. Number of Subarrays with Bounded Maximum  (Medium)

We are given an array nums of positive integers, and two positive integers left and right (left <= right).

Return the number of (contiguous, non-empty) subarrays such that the value of the maximum array element in that subarray is at least left and at most right.

Example 1:
  Input: 
  nums = [2, 1, 4, 3]
  left = 2
  right = 3
  Output: 3
  Explanation: There are three subarrays that meet the requirements: [2], [2, 1], [3].
---------------------------------------------
Refer below link to find the intuition:
https://leetcode.com/discuss/explore/june-leetcoding-challenge-2021/1278431/Number-of-Subarrays-with-Bounded-Maximum-or-JS-Python-Java-C%2B%2B-or-Easy-Triang.-Number-Sol.-w-Expl.

class Solution {
    public int numSubarrayBoundedMax(int[] nums, int left, int right) {
        int ans = 0;
        int mid = 0;
        int low = 0;
        for(int num : nums) {
            // if num is <= right, increment ans by mid (subarr); else reset mid (subarr) to 0
            if(num <= right)
                ans += (++mid);
            else 
                mid = 0;
            
            // if num is less than left, deduct ans by low; else reset low (subarr) to 0
            if(num < left) 
                ans -= (++low);
            else
                low = 0;
        }
        return ans;   
    }
}
