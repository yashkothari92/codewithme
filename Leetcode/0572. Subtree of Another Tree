LC#572. Subtree of Another Tree	(Easy)

Given the roots of two binary trees root and subRoot, return true if there is a subtree of root with the same structure and node values of subRoot and false otherwise.

A subtree of a binary tree tree is a tree that consists of a node in tree and all of this node's descendants. The tree tree could also be considered as a subtree of itself.

Example 1: ref [https://assets.leetcode.com/uploads/2021/04/28/subtree1-tree.jpg]
  Input: root = [3,4,5,1,2], subRoot = [4,1,2]
  Output: true

Example 2: ref [https://assets.leetcode.com/uploads/2021/04/28/subtree2-tree.jpg]
  Input: root = [3,4,5,1,2,null,null,0], subRoot = [4,1,2]
  Output: false

-----------------------------
Recursive
-----------------------------

public boolean isSubtree(TreeNode root, TreeNode subRoot) {
    if(root == null)  {
        return false;
    } else if(isSameTree(root, subRoot)) {
        return true;
    } else {
        return isSubtree(root.left, subRoot) || isSubtree(root.right, subRoot);
    } 
}

private boolean isSameTree(TreeNode root, TreeNode subRoot) {
    if(root == null || subRoot == null) {
        return root == null && subRoot == null;
    } else if(root.val == subRoot.val) {
        return isSameTree(root.left, subRoot.left) && isSameTree(root.right, subRoot.right);
    } else {
        return false;
    }
}
 
