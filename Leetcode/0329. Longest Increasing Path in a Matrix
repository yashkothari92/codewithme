LC#329. Longest Increasing Path in a Matrix  (Hard)

Given an m x n integers matrix, return the length of the longest increasing path in matrix.
From each cell, you can either move in four directions: left, right, up, or down. 
You may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed).

Example 1:
Input: matrix = [[9,9,4],[6,6,8],[2,1,1]]
Output: 4
Explanation: The longest increasing path is [1, 2, 6, 9].

Example 2:
Input: matrix = [[3,4,5],[3,2,6],[2,2,1]]
Output: 4
Explanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.

Example 3:
Input: matrix = [[1]]
Output: 1

class Solution {
    public int longestIncreasingPath(int[][] matrix) {
        // if given matrix is empty
        if(matrix == null || matrix.length == 0) {
            return 0;
        }   
        int max = 0;
        int rows = matrix.length;
        int cols = matrix[0].length;
        int[][] dp = new int[rows][cols];
        
        // iterate through each matrix element
        for(int i=0; i<rows; i++){
            for(int j=0;j<cols;j++){
                // if element is not set, invoke dfs & calcualte longest increasing path value
                if(dp[i][j] == 0) {
                    dp[i][j] = dfs(matrix, i, j, dp, Integer.MIN_VALUE);
                    max = Math.max(max, dp[i][j]);
                }
            }
        }
        return max;
    }
    
    public int dfs(int[][] matrix, int row, int col, int[][] dp, int prev){
    
        // boundary cases or current element is <= previous one, return 0
        if(row < 0 || row > matrix.length-1 || col < 0 || col > matrix[0].length-1 ||
                 matrix[row][col] <= prev) {
            return 0;
        }
        
        // if already computed, simply return it
        if(dp[row][col] != 0) 
            return dp[row][col];
        
        // calculate each neighbouring cell
        int left = dfs(matrix, row, col-1, dp, matrix[row][col]);
        int right = dfs(matrix, row, col+1, dp, matrix[row][col]);
        int up = dfs(matrix, row-1, col, dp, matrix[row][col]);
        int down = dfs(matrix, row+1, col, dp, matrix[row][col]);
        
        // get the max out of 4 neighbours + 1 (value of cell itself)
        dp[row][col] = Math.max(left, Math.max(right, Math.max(up, down)))+1;
        return dp[row][col];        
    }
}
