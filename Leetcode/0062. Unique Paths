LC#62 Unique Paths  (Medium)

A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).
The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).
How many possible unique paths are there?

Example 1:
  Input: m = 3, n = 7
  Output: 28

Example 2:
  Input: m = 3, n = 2
  Output: 3
  Explanation:
  From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
  1. Right -> Down -> Down
  2. Down -> Down -> Right
  3. Down -> Right -> Down

Example 3:
  Input: m = 7, n = 3
  Output: 28

Example 4:
  Input: m = 3, n = 3
  Output: 6
---------------------------------------------------------------------------
Brute-force (Recursive)
-------------------------
public int uniquePaths(int m, int n) {
    if(m==1 || n == 1) {
        return 1;
    }
    return uniquePaths(m-1, n) + uniquePaths(m, n-1);      
}

-------------------------
Memoization using HashMap
-------------------------
public int uniquePaths(int m, int n) {
    HashMap<String, Integer> map = new HashMap<>();
    return helper(m, n, map);
}

public int helper(int m, int n, HashMap<String, Integer> map) {
    String cell = m+","+n;
    if(map.containsKey(cell)) return map.get(cell);

    if(m==1 || n == 1) return 1;
    if(m==0 || n == 0) return 0;

    map.put(cell, helper(m-1, n, map) + helper(m, n-1, map));      
    return map.get(cell);

}

