LC#906. Super Palindromes (Hard)

Let's say a positive integer is a super-palindrome if it is a palindrome, and it is also the square of a palindrome.
Given two positive integers left and right represented as strings, return the number of super-palindromes integers in the inclusive range [left, right].

Example 1:
  Input: left = "4", right = "1000"
  Output: 4
  Explanation: 4, 9, 121, and 484 are superpalindromes.
  Note that 676 is not a superpalindrome: 26 * 26 = 676, but 26 is not a palindrome.

Example 2:
  Input: left = "1", right = "2"
  Output: 1
  
--------------------------------------
class Solution {
    public int superpalindromesInRange(String left, String right) {
        List<Long> palindromeList = new ArrayList<>();
        int counter = 0;
        
        long leftNum = Long.parseLong(left);
        long rightNum = Long.parseLong(right);
        
        for(long i=1; i<10; i++) {
            palindromeList.add(i);
        }
        
        // constraint range 1e18
        // leftPart: 1e4, rightPart 1e4, and digit (for odd) => 1e4 + 1e4 + 10 = 1e9
        // 1e9 square = 1e18; hence iterated until 1e4           
        for(long i=1; i<10000; i++) {
            String leftPart = Long.toString(i); // 1e4
            String rightPart = new StringBuilder(leftPart).reverse().toString(); // 1e4
            
            // for even
            palindromeList.add(Long.parseLong(leftPart+rightPart)); // 1e8
            
            // for odd
            for(int digit = 0; digit<10; digit++) {
                palindromeList.add(Long.parseLong(leftPart + digit + rightPart)); // 1e9
            }
        }
        
        for(long num: palindromeList) {
            long squaredNum = num*num; // 1e18
            if(leftNum<= squaredNum && squaredNum <= rightNum && isPalindrom(squaredNum)) {
                counter++;
            }
        }       
        return counter;
    }
    
    private boolean isPalindrom(long num) {
        long sum = 0;
        long temp = num;
        while(temp > 0) {
            long r = temp%10;
            sum = sum*10 + r;
            temp/=10;
        }
        
        return sum == num;
    }
}
