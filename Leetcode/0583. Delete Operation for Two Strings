LC#583. Delete Operation for Two Strings  (Medium)

Given two strings word1 and word2, return the minimum number of steps required to make word1 and word2 the same.
In one step, you can delete exactly one character in either string.

Example 1:
  Input: word1 = "sea", word2 = "eat"
  Output: 2
  Explanation: You need one step to make "sea" to "ea" and another step to make "eat" to "ea".

Example 2:
  Input: word1 = "leetcode", word2 = "etco"
  Output: 4
---------------------
Using LCS (Longest Common Subsequence) : Refer [https://www.youtube.com/watch?v=NnD96abizww]
---------------------
class Solution {
    public int minDistance(String word1, String word2) {
        return word1.length() + word2.length() - 2*lcs(word1, word2, word1.length(), word2.length());
    }
    
    private int lcs (String s1, String s2, int m, int n) {
        
        if(m==0 || n==0) {
            return 0;
        }
        
        if(s1.charAt(m-1) == s2.charAt(n-1)) {
            return 1 + lcs(s1, s2, m-1, n-1); // 1 + (upper left) diagonal
        } else {
            return Math.max(lcs(s1, s2, m-1, n), lcs(s1, s2, m, n-1));
        }
    }

--------------------------
Using Memoization with LCS
--------------------------

class Solution {
    public int minDistance(String word1, String word2) {
        int[][] memo = new int[word1.length()+1][word2.length()+1];
        return word1.length() + word2.length() - 2*lcs(word1, word2, word1.length(), word2.length(), memo);
    }
    
    private int lcs(String s1, String s2, int m, int n, int[][] memo) {
        if(m ==0 || n ==0) {
            return 0;
        }
        
        if(memo[m][n] > 0)
            return memo[m][n];
        
        // if both the string char same, increment the value
        if(s1.charAt(m-1) == s2.charAt(n-1)) {
            memo[m][n] = 1 + lcs(s1, s2, m-1, n-1, memo);
        } else {
            // carries Max of (m-1, n) & (m, n-1)
            memo[m][n] = Math.max(lcs(s1, s2, m, n-1, memo), lcs(s1, s2, m-1, n, memo));
        }
        return memo[m][n];
    
}
