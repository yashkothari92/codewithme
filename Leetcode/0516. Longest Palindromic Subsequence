LC#516. Longest Palindromic Subsequence (Medium)

Given a string s, find the longest palindromic subsequence's length in s.
A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.

Example 1:
  Input: s = "bbbab"
  Output: 4
  Explanation: One possible longest palindromic subsequence is "bbbb".

Example 2:
  Input: s = "cbbd"
  Output: 2
  Explanation: One possible longest palindromic subsequence is "bb".
------------

class Solution {
    public int longestPalindromeSubseq(String s) {
        String s_rev = reverse(s);
        return LCS(s, s_rev);
    }
    
    public int LCS(String s, String s1) {
        int m = s.length();
        int n = s1.length();
        int[][] t = new int[m+1][n+1];
        
        for(int i=0; i<m+1; i++){
            for(int j=0; j<n+1; j++) {
                
                if(i==0 || j==0)    
                    continue;
                
                if(s.charAt(i-1)==s1.charAt(j-1)) {
                    t[i][j] = 1+t[i-1][j-1];
                } else {
                    t[i][j] = Math.max(t[i-1][j], t[i][j-1]);
                }
                    
            }
        }
        return t[m][n];
    }
    
    public String reverse(String s) {
        return new StringBuilder(s).reverse().toString();
    }
}
