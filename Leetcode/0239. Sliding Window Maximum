LC#239. Sliding Window Maximum  (Hard)

class Solution {
    // Brute force
    public int[] maxSlidingWindow(int[] nums, int k) {
    
        int res[] = new int[nums.length - k + 1];

        for (int i = 0; i < nums.length - k + 1; i++) {
          int MAX = Integer.MIN_VALUE;
          for (int j = i; j < i + k; j++) {
            MAX = Math.max(MAX, nums[j]);
          }
          res[i] = MAX;
        }
        return res;
    }
    
    // Optimized
     public int[] maxSlidingWindowOptimized(int[] nums, int k) {
        int res[] = new int[nums.length - k + 1]
        int i = 0;
        int j = 0;
        Deque<Integer> queue = new LinkedList<>();
        
        while(j < nums.length) {
            flushQueue(queue, nums, j);
            
            if(j-i+1 < k) {
              j++;
            } else if(j-i+1==k){
              res[i] = queue.getFirst();
              
               // remove element from queue when you move active window
                if(queue.getFirst() == nums[i]) {
                    queue.removeFirst();
                }
                i++;
                j++;
            }
        }
     }
     
     // flush the Queue if its Non-empty & current element is greater than queue's last element; and later add the element into the Queue.
     public Deque<Integer> flushQueue(Deque<Integer> queue, int[] nums, int j) {
        while(!queue.isEmpty() && queue.getLast() < nums[j]) {
            queue.removeLast();
        }
        queue.add(nums[j]);
        
        return queue;
     }
