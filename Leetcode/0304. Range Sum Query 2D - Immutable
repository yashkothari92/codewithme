LC#304. Range Sum Query 2D - Immutable  (Medium)

Given a 2D matrix matrix, handle multiple queries of the following type:
    Calculate the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).

Implement the NumMatrix class:

    NumMatrix(int[][] matrix) Initializes the object with the integer matrix matrix.
    int sumRegion(int row1, int col1, int row2, int col2) Returns the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).

Example 1: (Ref: https://assets.leetcode.com/uploads/2021/03/14/sum-grid.jpg)
  Input
  ["NumMatrix", "sumRegion", "sumRegion", "sumRegion"]
  [[[[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]], [2, 1, 4, 3], [1, 1, 2, 2], [1, 2, 2, 4]]
  Output
  [null, 8, 11, 12]

  Explanation
  NumMatrix numMatrix = new NumMatrix([[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]);
  numMatrix.sumRegion(2, 1, 4, 3); // return 8 (i.e sum of the red rectangle)
  numMatrix.sumRegion(1, 1, 2, 2); // return 11 (i.e sum of the green rectangle)
  numMatrix.sumRegion(1, 2, 2, 4); // return 12 (i.e sum of the blue rectangle)

--------------------------
Brute force (104ms/44.5MB)
--------------------------
class NumMatrix {

    int[][] matrix;
    public NumMatrix(int[][] matrix) {
        int m = matrix.length;
        int n = matrix[0].length;
        this.matrix = new int[m][n];
        this.matrix = matrix;
    }
    
    public int sumRegion(int row1, int col1, int row2, int col2) {
        int sum = 0;
        for(int r = row1; r<=row2; r++) {
            for(int c = col1; c<=col2; c++) {
               sum += matrix[r][c];                
            }
        }
        return sum;
    }
}

------------------
Prefix Sum approach
------------------
class NumMatrix {
    
    int[][] matrix;
    public NumMatrix(int[][] matrix) {
        // columns prefix sum
        for(int i=0; i<matrix.length; i++) {
            for(int j=1; j<matrix[0].length; j++) {
                matrix[i][j] += matrix[i][j-1];
            }
        }
        // rows prefix sum
        for(int i=1; i<matrix.length; i++) {
            for(int j=0; j<matrix[0].length; j++) {
                matrix[i][j] += matrix[i-1][j];
            }
        }
        this.matrix = matrix;
    }
    
    public int sumRegion(int row1, int col1, int row2, int col2) {
        int total = matrix[row2][col2];
        // deducting (upper-right cell + lower left cell) - diagonal
        int junk = (row1 > 0 ? matrix[row1-1][col2]:0) + (col1 > 0 ? matrix[row2][col1-1]:0) 
                    - ((row1 > 0 && col1 >0) ? matrix[row1-1][col1-1]:0);
        return total - junk;
    }
}
