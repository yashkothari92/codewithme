LC#1143. Longest Common Subsequence (Medium)

Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.
A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.
    For example, "ace" is a subsequence of "abcde".
A common subsequence of two strings is a subsequence that is common to both strings.

Example 1:
  Input: text1 = "abcde", text2 = "ace" 
  Output: 3  
  Explanation: The longest common subsequence is "ace" and its length is 3.

Example 2:
  Input: text1 = "abc", text2 = "abc"
  Output: 3
  Explanation: The longest common subsequence is "abc" and its length is 3.

Example 3:
  Input: text1 = "abc", text2 = "def"
  Output: 0
  Explanation: There is no such common subsequence, so the result is 0.
----------------
DP - Iterative
----------------
class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        int[][] dp = new int[text1.length()+1][text2.length()+1];
        
        return lcsHelper(text1, text2, text1.length(), text2.length(), dp);
    }
    
    private int lcsHelper(String text1, String text2, int m, int n, int[][] dp) {
        if(m == 0 || n == 0) {
            return 0;
        }
        
        for(int i=0; i<=m; i++) {
            for(int j=0; j<=n; j++) {
                if(i == 0 || j == 0) {
                    continue;
                }
                
                if(text1.charAt(i-1) == text2.charAt(j-1)) {
                    dp[i][j] = 1 + dp[i-1][j-1];
                } else {
                    dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);
                }
            }
        }
        return dp[m][n];
    }
}

--------------
Memoization
--------------
class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        int[][] dp = new int[text1.length()+1][text2.length()+1];
        
        return lcsHelper(text1, text2, text1.length(), text2.length(), dp);
    }
    
    private int lcsHelper(String text1, String text2, int m, int n, int[][] dp) {
        if(m == 0 || n == 0) {
            return 0;
        }
        
        if(dp[m][n] > 0)
            return dp[m][n];

        if(text1.charAt(m-1) == text2.charAt(n-1)) {
            dp[m][n] = 1 + lcsHelper(text1, text2, m-1, n-1, dp);
        } else {
            dp[m][n] = Math.max(lcsHelper(text1, text2, m-1, n, dp), lcsHelper(text1, text2, m, n-1, dp));
        }
        
        return dp[m][n];
    }
}
