LC#1354. Construct Target Array With Multiple Sums  (Hard)

Given an array of integers target. From a starting array, A consisting of all 1's, you may perform the following procedure :

    let x be the sum of all elements currently in your array.
    choose index i, such that 0 <= i < target.size and set the value of A at index i to x.
    You may repeat this procedure as many times as needed.

Return True if it is possible to construct the target array from A otherwise return False.

Example 1:
  Input: target = [9,3,5]
  Output: true
  Explanation: Start with [1, 1, 1] 
  [1, 1, 1], sum = 3 choose index 1
  [1, 3, 1], sum = 5 choose index 2
  [1, 3, 5], sum = 9 choose index 0
  [9, 3, 5] Done

Example 2:
  Input: target = [1,1,1,2]
  Output: false
  Explanation: Impossible to create target array from [1,1,1,1].

Example 3:
  Input: target = [8,5]
  Output: true
--------------------------------------

public boolean isPossible(int[] target) {
    // Max heap
    PriorityQueue<Integer> pq = new PriorityQueue<>((a,b) -> (b-a));
    long totalSum = 0;  // used long data-type to avoid LTE
  
    // start backwards, add all elements of target to the Priority Queue, also maintain totalSum
    for(int i : target) {
        pq.add(i);
        totalSum += i;
    }

    // until PriorityQueue is empty
    while (!pq.isEmpty()) {
        // take the max element off the Max heap
        int maxElem = pq.poll();
        long currSum = totalSum - maxElem; 
        
        // if Max element is 1, return true
        if (maxElem == 1 || currSum == 1) return true;
        // if currSum i.e. remainingSum is 0 or max Element is less than currSum, return false
        if (currSum == 0 || maxElem < currSum) return false;
        
        // get the new updated element to add in PQ 
        int newElm = (int) (maxElem % currSum);     //changed from maxElem - currSum to avoid LTE
        if(newElm == 0) return false;

        maxElem = newElm;
        pq.add(maxElem);
        
        // update the totalSum as updated newElem + currSum (i.e. remainingSum)
        totalSum = newElm + currSum;
    }
    return true;
}
