LC#1383. Maximum Performance of a Team  (Hard)

You are given two integers n and k and two integer arrays speed and efficiency both of length n. 
There are n engineers numbered from 1 to n. speed[i] and efficiency[i] represent the speed and efficiency of the ith engineer respectively.

Choose at most k different engineers out of the n engineers to form a team with the maximum performance.

The performance of a team is the sum of their engineers' speeds multiplied by the minimum efficiency among their engineers.
Return the maximum performance of this team. Since the answer can be a huge number, return it modulo 109 + 7.

Example 1:
  Input: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 2
  Output: 60
  Explanation: 
  We have the maximum performance of the team by selecting engineer 2 (with speed=10 and efficiency=4) and engineer 5 (with speed=5 and efficiency=7). That is, performance = (10 + 5) * min(4, 7) = 60.

Example 2:
  Input: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 3
  Output: 68
  Explanation:
  This is the same example as the first but k = 3. We can select engineer 1, engineer 2 and engineer 5 to get the maximum performance of the team. That is, performance = (2 + 10 + 5) * min(5, 4, 7) = 68.

Example 3:
  Input: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 4
  Output: 72

------------------------------
class Solution {
    
    private class Engineer{
        private int speed;
        private int efficiency;
        
        public Engineer(int speed, int efficiency){
            this.speed = speed;
            this.efficiency = efficiency;
        }
    }
   
    public int maxPerformance(int n, int[] speed, int[] efficiency, int k) {
        List<Engineer> engineers = new ArrayList<>();
        
        for(int i = 0; i < n; i++) {
            engineers.add(new Engineer(speed[i], efficiency[i]));
        }
        
        // sort the efficiency in decreasing order
         engineers.sort((a,b) -> b.efficiency - a.efficiency);
        
        // Priority Queue to store top K engineers (min heap, so slowest will be pulled out first)
        PriorityQueue<Engineer> queue = new PriorityQueue<>((a,b) -> a.speed - b.speed);
        
        long maxPerformance = 0;
        long currSpeed = 0;
        
        for(Engineer newHire: engineers) {
 
            if(queue.size() == k) {
                // remove the slowest speed engineer
                Engineer badPerformer = queue.poll();
                currSpeed -= badPerformer.speed;  
            }
            queue.add(newHire);

            currSpeed += newHire.speed;
            
            long currPerformance = currSpeed * (long)(newHire.efficiency);
            maxPerformance = Math.max(maxPerformance, currPerformance);
        }
        return (int)(maxPerformance % 1000000007); 
    }
}
