LC#970. Powerful Integers   (Medium)

Given three integers x, y, and bound, return a list of all the powerful integers that have a value less than or equal to bound.
An integer is powerful if it can be represented as xi + yj for some integers i >= 0 and j >= 0.
You may return the answer in any order. In your answer, each value should occur at most once.

Example 1:
  Input: x = 2, y = 3, bound = 10
  Output: [2,3,4,5,7,9,10]
  Explanation:
  2 = 20 + 30
  3 = 21 + 30
  4 = 20 + 31
  5 = 21 + 31
  7 = 22 + 31
  9 = 23 + 30
  10 = 20 + 32

Example 2:
  Input: x = 3, y = 5, bound = 15
  Output: [2,4,6,8,10,14]
--------------- ---------------- -------------
private List<Integer> retrievePowerfulIntOptim(int x, int y, int bound) {
		List<Integer> px = new ArrayList<>();
		List<Integer> py = new ArrayList<>();
		int powx = x, powy = y;

		px.add(1); // x = x^0
		py.add(1); // y = y^0

		if (x != 1) {
			// calculate the powers of x until < bound
			while (powx < bound) {
				px.add(powx); // x^1
				powx *= x; // x^2 ...
			}
		}

		if (y != 1) {
			// calculate the powers of y until < bound
			while (powy < bound) {
				py.add(powy); // y^1
				powy *= y; // y^2 ...
			}
		}

		Set<Integer> set = new HashSet<>();
		for (int ix : px) {
			for (int iy : py) {
				if (ix + iy <= bound)
					set.add(ix + iy);
			}
		}
		return set.stream().collect(Collectors.toList());
	}
