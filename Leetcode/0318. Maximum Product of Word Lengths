LC#318. Maximum Product of Word Lengths (Medium)

Given a string array words, return the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. 
If no such two words exist, return 0.

Example 1:
  Input: words = ["abcw","baz","foo","bar","xtfn","abcdef"]
  Output: 16
  Explanation: The two words can be "abcw", "xtfn".

Example 2:
  Input: words = ["a","ab","abc","d","cd","bcd","abcd"]
  Output: 4
  Explanation: The two words can be "ab", "cd".

Example 3:
  Input: words = ["a","aa","aaa","aaaa"]
  Output: 0
  Explanation: No such pair of words.
-------------------

public int maxProduct(String[] words) {
    int len = words.length;
    int mask[] = new int[len];
    int idx = 0;

    for(String word : words) {
        int bit = 0;
        for(char ch : word.toCharArray()) {
            bit = bit | (1 << ch); // bit = bit {bit-or} 2^ch * 1
        }
        mask[idx++] = bit;  //store word state in the mask array
    }

    int max = 0;
    for(int i=0; i<len; i++) {
        for(int j = i+1; j<len; j++) {
            if((mask[i] & mask[j]) == 0) {
                max = Math.max(max, (words[i].length() * words[j].length()));
            }
        }
    }

    return max;
}
