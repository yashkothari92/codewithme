LC#1029. Two City Scheduling  (Medium)

A company is planning to interview 2n people. Given the array costs where costs[i] = [aCosti, bCosti], the cost of flying the ith person to city a is aCosti, and the cost of flying the ith person to city b is bCosti.

Return the minimum cost to fly every person to a city such that exactly n people arrive in each city.

Example 1:
  Input: costs = [[10,20],[30,200],[400,50],[30,20]]
  Output: 110
  Explanation: 
  The first person goes to city A for a cost of 10.
  The second person goes to city A for a cost of 30.
  The third person goes to city B for a cost of 50.
  The fourth person goes to city B for a cost of 20.

  The total minimum cost is 10 + 30 + 50 + 20 = 110 to have half the people interviewing in each city.

Example 2:
  Input: costs = [[259,770],[448,54],[926,667],[184,139],[840,118],[577,469]]
  Output: 1859

Example 3:
  Input: costs = [[515,563],[451,713],[537,709],[343,819],[855,779],[457,60],[650,359],[631,42]]
  Output: 3086
  
----------------------------
public int twoCitySchedCost(int[][] costs) {
        PriorityQueue<int[]> apq = new PriorityQueue<>((a,b) -> Math.abs(a[0]-a[1]) - Math.abs(b[0]-b[1]));
        PriorityQueue<int[]> bpq = new PriorityQueue<>((a,b) -> Math.abs(a[0]-a[1]) - Math.abs(b[0]-b[1]));
        
        int size = costs.length;
        // iterate through 2D array, and add element into A_PQ (when a[0] is smaller) or B_PQ (when a[1] is smaller)
        for(int i=0; i<size; i++) {
            if(costs[i][0] < costs[i][1]){
                apq.add(costs[i]);
                if(apq.size() > size/2) {
                    bpq.add(apq.poll());
                }
            } else {
                bpq.add(costs[i]);
                 if(bpq.size() > size/2) {
                    apq.add(bpq.poll());
                }
            }
        }

        int sum = 0;
        for(int[] i : apq) {
            sum += i[0];
        }
        
        for(int[] i : bpq) {
            sum += i[1];
        }
        
        return sum;
    }
