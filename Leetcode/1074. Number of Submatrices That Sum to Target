LC#1074. Number of Submatrices That Sum to Target (Hard)

Given a matrix and a target, return the number of non-empty submatrices that sum to target.

Example 1:
  0   1   0
  1   1   1
  0   1   0
  Input: matrix = [[0,1,0],[1,1,1],[0,1,0]], target = 0
  Output: 4
  Explanation: The four 1x1 submatrices that only contain 0.

Example 2:
  1   -1
  -1   1
  Input: matrix = [[1,-1],[-1,1]], target = 0
  Output: 5
  Explanation: The two 1x2 submatrices, plus the two 2x1 submatrices, plus the 2x2 submatrix.

Example 3:
  Input: matrix = [[904]], target = 0
  Output: 0
----------------------------------- ----------------------------------- -----------------------------------
public int numSubmatrixSumTarget(int[][] matrix, int target) {
        if(matrix.length==0) return 0;
        
        int rows = matrix.length;
        int cols = matrix[0].length;
        Map<Integer, Integer> map = new HashMap<>();
        int count = 0;
        
        // calculate prefix sum for each row 
        for(int i=0; i<rows; i++) {
            for(int j=1; j<cols; j++){
                matrix[i][j] += matrix[i][j-1];
            }
        }
        
        // for every possible range between two columns, accumulate the prefix sum of submatrices 
        // that can be formed between these two columns by adding up the sum of values between these two columns for every row
       
        // prefix sum of columns range
        for(int startCol = 0; startCol<cols; startCol++) {
            for(int currCol = startCol; currCol<cols; currCol++) {
                
                // clear prev entries
                map.clear();
                map.put(0,1);
                
                int sum = 0;
                // add sum for each row b/w the given range of cols
                for(int row=0; row<rows; row++){
                    // add sum for this row b/w columns (start, end)
                    
                    // sum stores the summation of current row of matrix b/w given range of cols
                    sum += matrix[row][currCol];
                    if(startCol > 0){
                        sum -= matrix[row][startCol-1];
                    }
                    
                    // if (sum-target) found it the map, increment the count
                    count += map.getOrDefault(sum-target, 0);
                    // and push the sum to the map
                    map.put(sum, map.getOrDefault(sum, 0)+1);
                }
            }
        }
        return count;
    }
