LC#377. Combination Sum IV (Medium)

Given an array of distinct integers nums and a target integer target, return the number of possible combinations that add up to target.
The answer is guaranteed to fit in a 32-bit integer.

Example 1:
    Input: nums = [1,2,3], target = 4
    Output: 7
    Explanation:
    The possible combination ways are:
    (1, 1, 1, 1)
    (1, 1, 2)
    (1, 2, 1)
    (1, 3)
    (2, 1, 1)
    (2, 2)
    (3, 1)
    Note that different sequences are counted as different combinations.

Example 2:
    Input: nums = [9], target = 3
    Output: 0
    
// Brute-force (recursive)
// At each index, if the element is less than target, then we can always form a combination by picking the current element

	private static int getCombinations(int[] nums, int target) {
		int counter = 0;
		if (target == 0) {
			return 1;
		}

		for (int i : nums) {
			if (i <= target) {
				System.out.println(counter + ":" + (target - i));
				counter += getCombinations(nums, target - i);
			}
		}
		return counter;
	}
	
	
// Top-down approach (DP)

    public int combinationSum4(int[] nums, int target) {
        int[] memo = new int[target +1];
        Arrays.fill(memo, -1);
        return helper(nums, target, memo);   
    }
    
    public int helper(int[] nums, int target, int[] memo) {
        memo[0] = 1;
        
        if(memo[target] != -1) {
            return memo[target];
        }
        
        int counter = 0;
        
        for(int i : nums) {
            if(i <= target) {
                counter += helper(nums, target-i, memo);
            }
        }
        
        memo[target] = counter;
        return memo[target];
    }

 
