LC#40. Combination Sum II (Medium)

Given a collection of candidate numbers (candidates) and a target number (target), 
find all unique combinations in candidates where the candidate numbers sum to target.

Each number in candidates may only be used once in the combination.

Note: The solution set must not contain duplicate combinations.

Example 1:
  Input: candidates = [10,1,2,7,6,1,5], target = 8
  Output: 
  [
  [1,1,6],
  [1,2,5],
  [1,7],
  [2,6]
  ]

Example 2:
  Input: candidates = [2,5,2,1,2], target = 5
  Output: 
  [
  [1,2,2],
  [5]
  ]
--------------------
class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> lists = new ArrayList<>();
        Arrays.sort(candidates);
        combinationSum2Helper(lists, candidates, target, new ArrayList<>(), 0);
        return lists;
    }
    
    private void combinationSum2Helper(List<List<Integer>> lists, int[] candidates, int target, ArrayList<Integer> tempList, int idx) {
        if (target < 0) return;
        else if (target == 0) lists.add(new ArrayList<>(tempList));
        else {
            for(int i=idx; i<candidates.length; i++) {
                if(i>idx && candidates[i-1] == candidates[i])  //skip duplicates
                    continue;
                tempList.add(candidates[i]);
                combinationSum2Helper(lists, candidates, target-candidates[i], tempList, i+1);
                tempList.remove(tempList.size()-1);
            }
        }
    }
}
