LC#509. Fibonacci Number    (Easy)

The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, 
starting from 0 and 1. That is,
F(0) = 0, F(1) = 1
F(n) = F(n - 1) + F(n - 2), for n > 1.

Given n, calculate F(n).

Input: n = 2
Output: 1
Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1.

Input: n = 3
Output: 2
Explanation: F(3) = F(2) + F(1) = 1 + 1 = 2.

Input: n = 4
Output: 3
Explanation: F(4) = F(3) + F(2) = 2 + 1 = 3.
-----------------------------------------------------------------
    // standard recursive solution (Runtime: 6ms, Memory:35.7MB)
    public int fib(int n) {
        if(n < 2) return n;            
        return fib(n-1)+fib(n-2);
    }
    
-----------------------------------------------------------------
    // memoized version of above (Runtime: 0ms, Memory:35.8MB)
    public int fib(int n) {
        int memo[] = new int[n+1];
        return fibMemo(n, memo);
    }
    
    public int fibMemo(int n, int[] memo) {
        if(memo[n] != 0) {
            return memo[n];
        }
        
        if(n < 2) {
            memo[n] = n;
            return memo[n];
        }
        
        memo[n] = fibMemo(n-1, memo) + fibMemo(n-2, memo);
        return memo[n];
    }

-----------------------------------------------------------------
    // rolling previous pointers (iterative)
    public int fib(int n) {
        if (n < 2) return n;
        int a = 0, b = 1, temp;
        for (int i = 1; i < n; i++) {
            temp = a;
            a = b;
            b += temp;
        }
        return b;
    }
