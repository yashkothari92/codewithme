LC#968. Binary Tree Cameras  (Hard)

Given a binary tree, we install cameras on the nodes of the tree. 
Each camera at a node can monitor its parent, itself, and its immediate children.

Calculate the minimum number of cameras needed to monitor all nodes of the tree.

Example 1:
  Input: [0,0,null,0,0]
  Output: 1
  Explanation: One camera is enough to monitor all nodes if placed as shown.

Example 2:
  Input: [0,0,null,0,null,0,null,null,0]
  Output: 2
  Explanation: At least two cameras are needed to monitor all nodes of the tree. The above image shows one of the valid configurations of camera placement.
------------------------

class Solution {
    
    private final int NO_COVERED = 0, CAMERA_COVERED = 1, HAS_CAMERA = 2;
    private int camera;
    
    public int minCameraCover(TreeNode root) {
        return (dfs(root) == NO_COVERED ? 1 : 0) + camera;
    }
    
    private int dfs(TreeNode root) {
        if(root == null) return CAMERA_COVERED;
        if(root.left == null && root.right == null) return NO_COVERED;
        
        int left = dfs(root.left);
        int right = dfs(root.right);
        
        if(left == NO_COVERED || right == NO_COVERED) {
            camera++;
            return HAS_CAMERA;
        }
        
        return left == HAS_CAMERA || right == HAS_CAMERA ? CAMERA_COVERED : NO_COVERED;
    }
}
