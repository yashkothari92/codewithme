LC#105. Construct Binary Tree from Preorder and Inorder Traversal (Medium)

Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree,
construct and return the binary tree.

Example 1: (ref: https://assets.leetcode.com/uploads/2021/02/19/tree.jpg)
  Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]
  Output: [3,9,20,null,null,15,7]

Example 2:
  Input: preorder = [-1], inorder = [-1]
  Output: [-1]

----------------------------------------------------

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int preIdx = 0;
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        int startIdx = 0;
        int endIdx = preorder.length-1;
        return buildTreeSub(preorder, inorder, startIdx, endIdx);
    }

    private TreeNode buildTreeSub(int[] preorder, int[] inorder, int startIdx, int endIdx) {
        if(startIdx > endIdx)
            return null;
        
        TreeNode node = new TreeNode(preorder[preIdx++]);
        if(startIdx == endIdx)
            return node;
        
        int idx = search(node.val, inorder, startIdx, endIdx);
        node.left = buildTreeSub(preorder, inorder, startIdx, idx-1);
        node.right = buildTreeSub(preorder, inorder, idx+1, endIdx);
        
        return node;
    } 
    
    private int search(int nodeVal, int[] inorder, int startIdx, int endIdx) {
        for(int i = startIdx; i<=endIdx; i++) {
            if (nodeVal == inorder[i]) {
                return i;
            }
        }
        return 0;
    }
}
