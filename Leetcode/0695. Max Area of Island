LC#695. Max Area of Island  (Medium#June series)

You are given an m x n binary matrix grid. An island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) 
You may assume all four edges of the grid are surrounded by water.

The area of an island is the number of cells with a value 1 in the island.

Return the maximum area of an island in grid. If there is no island, return 0.

Example 1: (refer: https://assets.leetcode.com/uploads/2021/05/01/maxarea1-grid.jpg)
  Input: grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]
  Output: 6
  Explanation: The answer is not 11, because the island must be connected 4-directionally.

Example 2:
  Input: grid = [[0,0,0,0,0,0,0,0]]
  Output: 0
--------------------------------
class Solution {
    boolean[][] seen;
    public int maxAreaOfIsland(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        seen = new boolean[m][n];
        int ans = 0 ;
        
        
        for(int i=0; i<m; i++) {
            for(int j=0; j<n; j++) {
              ans = Math.max(ans, helper(grid, i, j, ans));
            }
        }
        return ans;
        
    }
    
    private int helper(int[][] grid, int row, int col, int ans) {
        if((row <0 || row > grid.length-1) || (col <0 || col> grid[0].length-1) || seen[row][col] || grid[row][col] == 0) {
            return 0;
        }
        
        seen[row][col] = true;
        
        int down = helper(grid, row+1, col, ans);
        int up = helper(grid, row-1, col, ans);
        int right = helper(grid, row, col+1, ans);
        int left = helper(grid, row, col-1, ans);
        
        return 1 +down+up+right+left;
    }
}
